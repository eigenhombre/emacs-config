;; Highlighting of long lines.....................................
(defun highlight-long-lines ()
  "Turn on highlighting of long lines."
  (interactive)
  (highlight-lines-matching-regexp ".\\{81\\}" 'hi-pink))

(defun unhighlight-long-lines ()
  "Turn off highlighting of long lines."
  (interactive)
  (unhighlight-regexp "^.*\\(?:.\\{81\\}\\).*$"))

;; Clojure mode hooks.............................................
(defun set-clojure-indents ()
  ;; Handling Clojure indentation for certain macros
  (put-clojure-indent 'DELETE* 2)
  (put-clojure-indent 'GET* 2)
  (put-clojure-indent 'POST* 2)
  (put-clojure-indent 'PUT* 2)
  (put-clojure-indent 'PATCH 2)
  (put-clojure-indent 'DELETE 2)
  (put-clojure-indent 'GET 2)
  (put-clojure-indent 'ANY 2)
  (put-clojure-indent 'POST 2)
  (put-clojure-indent 'PUT 2)
  (put-clojure-indent 'addtest 1)
  (put-clojure-indent 'after 1)
  (put-clojure-indent 'after-all 1)
  ;;(put-clojure-indent 'api 0)
  (put-clojure-indent 'are 1)
  (put-clojure-indent 'around 1)
  (put-clojure-indent 'before 0)
  (put-clojure-indent 'before-all 0)
  (put-clojure-indent 'cond-> 0)
  (put-clojure-indent 'check-cw-metric 2)
  (put-clojure-indent 'context 2)
  (put-clojure-indent 'context* 2)
  (put-clojure-indent 'describe 1)
  (put-clojure-indent 'describe-examples 2)
  (put-clojure-indent 'describe-with-dawg 1)
  (put-clojure-indent 'describe-with-db 1)
  (put-clojure-indent 'describe-with-es 1)
  (put-clojure-indent 'describe-with-mock-etl-state 1)
  (put-clojure-indent 'describe-with-server 1)
  (put-clojure-indent 'discard-stdout 0)
  (put-clojure-indent 'do-rate-limited 1)
  (put-clojure-indent 'do-until-input 1)
  (put-clojure-indent 'do-with-save-config 1)
  (put-clojure-indent 'fact 1)
  (put-clojure-indent 'facts 1)
  (put-clojure-indent 'props/for-all 1)
  (put-clojure-indent 'for-all-mock-reports 1)
  (put-clojure-indent 'hellish-copy 4)
  (put-clojure-indent 'holiday-test 2)
  (put-clojure-indent 'html/at 1)
  (put-clojure-indent 'is 0)
  (put-clojure-indent 'it 1)
  (put-clojure-indent 'match 1)
  (put-clojure-indent 'metrics/time 1)
  (put-clojure-indent 'middleware 1)
  (put-clojure-indent 'mock-dl-bad 0)
  (put-clojure-indent 'mock-dl-good-and-fast 0)
  (put-clojure-indent 'mock-dl-short 0)
  (put-clojure-indent 'nolog 0)
  (put-clojure-indent 'patterns-match 0)
  (put-clojure-indent 'possible-schedules 1)
  (put-clojure-indent 'schedule-dates 1)
  (put-clojure-indent 'pending 1)
  (put-clojure-indent 'problem 1)
  (put-clojure-indent 'process-safely 2)
  (put-clojure-indent 'prop/for-all 1)
  (put-clojure-indent 'proxy 1)
  (put-clojure-indent 'route-middleware 1)
  (put-clojure-indent 'redef-dl-fast 0)
  (put-clojure-indent 'redef-dl 0)
  (put-clojure-indent 'section 1)
  (put-clojure-indent 'service-unavailable 0)
  (put-clojure-indent 'should 0)
  (put-clojure-indent 'solves 0)
  (put-clojure-indent 'test-location 1)
  (put-clojure-indent 'testing-salesforce 4)
  (put-clojure-indent 'throws-with 1)
  (put-clojure-indent 'thrown? 1)
  (put-clojure-indent 'thrown-with-exception? 1)
  (put-clojure-indent 'try 0)
  (put-clojure-indent 'try+ 0)
  (put-clojure-indent 'watcher 1)
  (put-clojure-indent 'without-logging 0)
  (put-clojure-indent 'wrap-response 1)
  (put-clojure-indent 'wait-for 1)
  (put-clojure-indent 'wcar 1)
  (put-clojure-indent 'with 1)
  (put-clojure-indent 'with-expect-write-to-kinesis 0)
  (put-clojure-indent 'with-level 1)
  (put-clojure-indent 'wrap-response 3)
  (put-clojure-indent 'with-audit-client 2)
  (put-clojure-indent 'with-adjusted-laa 1)
  (put-clojure-indent 'within-temp-ns 0)
  (put-clojure-indent 'require-valid-admin-api-key 1)
  (put-clojure-indent 'require-valid-service-api-key 1)
  (put-clojure-indent 'undocumented 0)
  (put-clojure-indent 'symbol-macrolet 1)
  (put-clojure-indent 'subsection 1)
  (put-clojure-indent 'perf/p 1)
  (put-clojure-indent 'op/p 1)
  (put-clojure-indent 'log-timing 1)
  (put-clojure-indent 'subsubsection 1)
  (put-clojure-indent 'prop/for-all 1))

(defun convert-selection-to-link ()
  "For unmark: Convert selected text to Hiccup link"
  (interactive)
  (let* ((url (read-from-minibuffer "Enter link URL: "))
	 (bounds (if (use-region-p)
		     (cons (region-beginning) (region-end))
		   (bounds-of-thing-at-point 'symbol)))
         (text (buffer-substring-no-properties (car bounds) (cdr bounds)))
	 (to-replace (insert (concat "\" [:a {:href \"" url "\"} \"" text "\"] \""))))
    (when bounds
      (delete-region (car bounds) (cdr bounds))
      (insert to-replace))))


(defun convert-selection-to-code ()
  "For unmark: Convert selected text to Hiccup link"
  (interactive)
  (let* ((bounds (if (use-region-p)
		     (cons (region-beginning) (region-end))
		   (bounds-of-thing-at-point 'symbol)))
         (text (buffer-substring-no-properties (car bounds) (cdr bounds)))
	 (to-replace (insert (concat "\" [:code \"" text "\"] \""))))
    (when bounds
      (delete-region (car bounds) (cdr bounds))
      (insert to-replace))))

(defun eval-forward ()
  (interactive)
  (paredit-forward)
  (cider-eval-last-sexp))

(add-hook 'cider-mode-hook
          ;; Tell Cider about deftest equivalents:
          '(lambda ()
             (add-to-list 'cider-test-defining-forms "defsystest")))

(add-hook 'clojure-mode-hook
          '(lambda ()
             (paredit-mode 1)
	     ;; ;; Fix up paredit for terminal emacs
	     ;; (define-key paredit-mode-map (kbd "M-)") 'paredit-forward-slurp-sexp)
	     ;; (define-key paredit-mode-map (kbd "M-}") 'paredit-forward-barf-sexp)
	     (aggressive-indent-mode 1)
             (highlight-long-lines)
	     (clj-refactor-mode 1)
             ;; (lsp)
	     (yas-minor-mode 1) ;; for adding require/use/import
	     (cljr-add-keybindings-with-prefix "C-c C-t")
             (define-key clojure-mode-map (kbd "C-o x")
	       'cider-eval-defun-at-point)
             (define-key clojure-mode-map (kbd "C-o j") 'cider-jack-in)
             (define-key clojure-mode-map (kbd "C-o J")
               (lambda () (interactive) (cider-quit) (cider-jack-in)))
	     ;;(define-key clojure-mode-map (kbd "C-o K") 'convert-selection-to-link)
	     (define-key clojure-mode-map (kbd "C-o C") 'convert-selection-to-code)
             (define-key clojure-mode-map (kbd "C-<up>") 'paredit-backward)
             (define-key clojure-mode-map (kbd "C-<down>") 'paredit-forward)
             (define-key clojure-mode-map (kbd "C-c k")
               (lambda ()
                 (interactive)
                 (save-buffer)
                 (cider-load-buffer)))
             ;;            (define-key clojure-mode-map (kbd "C-o SPC")
             ;;              (lambda ()
             ;;                (interactive)
             ;;                (cider-interactive-eval "(let [result (clojure.test/run-tests)]
             ;;     (if
             ;;         (->> result
             ;;              ((juxt :fail :error))
             ;;              (apply +)
             ;;              zero?)
             ;;       (clojure.java.shell/sh \"say\" \"ok\")
             ;;       (clojure.java.shell/sh \"say\" \"fail\"))
             ;; result)")))
             (define-key clojure-mode-map (kbd "C-o y")
               (lambda ()
	         (interactive)
	         (insert "\n;;=>\n\n")
	         (cider-eval-last-sexp 't)
                 (join-line)))
	     (define-key clojure-mode-map (kbd "C-o Y")
	       (lambda ()
	         (interactive)
	         (cider-pprint-eval-last-sexp)))
	     (define-key clojure-mode-map (kbd "s-i") 'cider-eval-last-sexp)
             (define-key clojure-mode-map (kbd "C-c i") 'cider-eval-last-sexp)
             (define-key clojure-mode-map (kbd "s-I") 'eval-forward)
             (define-key clojure-mode-map (kbd "C-c TAB") 'eval-forward)
             (define-key clojure-mode-map (kbd "C-o C-i")
               (lambda ()
                 (interactive)
                 (cider-auto-test-mode 1)))
	     (add-to-list 'cider-test-defining-forms "defsystest")
	     (set-clojure-indents)))

;; Find Leiningen.............................................
(add-to-list 'exec-path "/usr/local/bin")


;; Cider setup................................................
;;
(add-hook 'cider-mode-hook #'eldoc-mode)
(setq cider-auto-select-error-buffer nil)
(setq cider-repl-pop-to-buffer-on-connect nil)
(setq cider-interactive-eval-result-prefix ";; => ")
(setq cider-repl-history-file (concat user-emacs-directory "../.cider-history"))
;; Fix https://github.com/clojure-emacs/cider/issues/1258:
(defvar cider-eval-progress-bar-show nil)

;; Run marginalia on current project. You need
;; [michaelblume/marginalia "0.9.0"] installed in the dependencies for
;; that project.
(global-set-key "\C-o2"
		(lambda ()
		  (interactive
		   (cider-interactive-eval
		    "(require 'marginalia.core)
                     (marginalia.core/run-marginalia nil)
                     (clojure.java.shell/sh \"open\" \"docs/uberdoc.html\")"))))

;; Babashka
(add-to-list 'auto-mode-alist '("\\.bb\\'" . clojure-mode))
